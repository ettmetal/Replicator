# EditorConfig is awesome:http://EditorConfig.org
# Adapted from Roslyn's styles: https://github.com/dotnet/roslyn/blob/master/.editorconfig

# top-most EditorConfig file
root = true

# Defaults: don't use tabs for indentation, Unix newlines.
[*]
end_of_line = lf
indent_style = space
# (Please don't specify an indent_size here; that has too many unintended consequences.)

# Xml project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# Xml config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

# Code files
[*.cs]
charset = utf-8-bom
indent_style = tab
indent_size = 4
insert_final_newline = true

# Avoid "this." where unnessecary
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# Predefined type names should be used over framework types
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# Accessibility must be explicit
dotnet_style_require_accessibility_modifiers = always:error

# Prefer supported modern framework features
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
# Tuples should use explicit member names
dotnet_style_explicit_tuple_names = true:warning

# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true

# Naming conventions:
# These conventions should mean that non-public members , parameters, locals and local functions are camelCase but public items and type and namespace names are PascalCase
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
dotnet_naming_style.camel_case_style.capitalization = camel_case

# Default to camelCase
dotnet_naming_symbols.all_symbols.applicable_kinds = *

dotnet_naming_rule.default_is_camel_case.symbols = all_symbols
dotnet_naming_rule.default_is_camel_case.style = camel_case_style
dotnet_naming_rule.default_is_camel_case.severity = suggestion

# Public members are PascalCase - C# spec treats protected as non-public, because it provides a method for manipulation
dotnet_naming_symbols.public_symbols.applicable_kinds = class,struct,interface,enum,property,method,field,event,delegate
dotnet_naming_symbols.public_symbols.applicable_accessibilities = public,internal,protected,protected_internal

dotnet_naming_rule.public_is_pascal_case.symbols = public_symbols
dotnet_naming_rule.public_is_pascal_case.style = pascal_case_style
dotnet_naming_rule.public_is_pascal_case.severity = warning

# Namespaces and type parameters are PascalCase
dotnet_naming_symbols.namespace_and_type_parameter.applicable_kinds = namespace,type_parameter

dotnet_naming_rule.namespace_is_pascal_case.symbols = namespace_and_type_parameter
dotnet_naming_rule.namespace_is_pascal_case.style = pascal_case_style
dotnet_naming_rule.namespace_is_pascal_case.severity = warning

# Modifiers should follow given order
csharp_preferred_modifier_order = public,internal,protected,private,static,extern,new,abstract,virtual,sealed,override,readonly,unsafe,volatile,async:warning

# Type should always be explicit
csharp_style_var_for_built_in_types = false:warning
csharp_style_var_when_type_is_apparent = false:warning
csharp_style_var_elsewhere = flase:warning

# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods = false:suggestion
csharp_style_expression_bodied_constructors = false:suggestion
csharp_style_expression_bodied_operators = false:suggestion

# Prefer property-like constructs to have an expression body
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_accessors = true:suggestion

# Prefer supported modern language features
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion

# Require braces
csharp_prefer_braces = true:error

# CSharp formatting settings:
# Newlines
csharp_new_line_before_open_brace = none
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = false
csharp_new_line_between_query_expression_clauses = true

# Indentation
csharp_indent_braces = false
csharp_indent_labels = one_less_than_current
csharp_indent_block_contents = true
csharp_indent_case_contents = true
csharp_indent_switch_labels = true

# Spacing
csharp_space_after_dot = false
csharp_space_before_dot = false
csharp_space_after_cast = false
csharp_space_after_comma = true
csharp_space_before_comma = false
csharp_space_between_parentheses = none
csharp_space_between_square_brackets = false
csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_semicolon_in_for_statement = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_keywords_in_control_flow_statements = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parentheses = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false

# Wrapping
csharp_preserve_single_line_statements = true
csharp_preserve_single_line_blocks = true
